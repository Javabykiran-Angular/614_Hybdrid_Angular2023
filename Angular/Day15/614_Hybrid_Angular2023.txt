Last Lecture Agenda
1 Custom Pipe 
2 @Pipe 
	=> Decorator
	=> it is class Level decorator
3 PipeTransform
	=> It is interface 
4 transform()
	-> implement transform method => u can write ur custom pipe logic 
5 Conduct test on jbktest.com

summary & Interview Questions
	
	ng g c customPipe
	
	.html
	<h2> {{strDetails | summary}}</h2>
	<h2> {{strDetails | summary:0:50}}</h2>
	
	utility=> summary.pipe.ts
	
	@Pipe({
		name:'summary'
	})
	export class SummaryPipe implement PipeTransform{
		transform(value:any,start:numbre=0,end:number=20){
		
			let temp=(<string>value );
			return (temp.substring(start,end)+"...");
		}
	}
	
	app.module.ts 
	SummaryPipe
	
	Conduct test on jbktest.com

1 What is use of @Pipe?
2 How to implement Custom Pipe?
3 What is use of PipeTransform?
4 Why we use transform method?



Today's Lecture Agenda
1 What it is Services?
	- It is a Simple class 
2 What is use of Service?
	- it is used for code maintainabilty
	- It is used for code reuseabilty 
	- It is used to write ur Business Logic 
	- It is used to connect ur backend server 
	- It is used to provide isolation to ur component from http end point URL 
3 How to Use Dependancy Injection
4 Where to use Service?

summary & Interview Questions

export class CourseService{
	private course:string[]=[....]'
	
	getCourse(){
		return this.course;
	}
}

course.cpmponent.ts
mycourse:string[]=[];
constructor(private service:CourseService){
	//let service=new CourseService();
	 //this.mycourse=service.getCourse();
}

ngonInit(){
	this.mycourse=this.service.getCourse();
}

app.module.ts
provider:[CourseService]

.html
<ol>
	<li *ngFor="let item of mycourse">
		{{item}}</li>
</ol>


1 What it is Services?
2 What is use of Service?
3 How to Use Dependancy Injection
4 Where to use Service?





